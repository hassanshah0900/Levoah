-- Current sql file was generated after introspecting the database
-- If you want to run this migration please uncomment this code before executing migrations
/*
CREATE TYPE "public"."product_type" AS ENUM('glasses', 'accessories', 'lenses');--> statement-breakpoint
CREATE TABLE "product_variants" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "product_variants_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"price" integer,
	"quantity_in_stock" integer,
	"attributes" jsonb,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"product_id" bigint
);
--> statement-breakpoint
ALTER TABLE "product_variants" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "categories" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "categories_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"name" text,
	"slug" text,
	"path" text,
	"parent_category" bigint,
	"meta" jsonb,
	"image_url" text,
	"description" text,
	"product_type" "product_type" DEFAULT 'glasses' NOT NULL
);
--> statement-breakpoint
ALTER TABLE "categories" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "roles" (
	"id" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "roles_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1),
	"name" text NOT NULL,
	CONSTRAINT "roles_name_key" UNIQUE("name")
);
--> statement-breakpoint
ALTER TABLE "roles" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "permissions" (
	"id" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "permissions_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1),
	"name" text NOT NULL
);
--> statement-breakpoint
ALTER TABLE "permissions" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "addresses" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "addresses_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"full_name" text NOT NULL,
	"country" text NOT NULL,
	"province" text,
	"city" text,
	"phone" text,
	"email" text,
	"address" text,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"postal_code" text,
	"user_id" smallint
);
--> statement-breakpoint
ALTER TABLE "addresses" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "orders" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "orders_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"user_id" bigint,
	"status" text,
	"shipping_address" jsonb NOT NULL,
	"shipping_amount" integer,
	"payment_status" text,
	"discount_amount" integer,
	"tax_amount" integer,
	"payment_method" text,
	"tracking_code" text,
	CONSTRAINT "orders_tracking_code_key" UNIQUE("tracking_code")
);
--> statement-breakpoint
ALTER TABLE "orders" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "brands" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "brands_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"name" text,
	"slug" text,
	"logo" text
);
--> statement-breakpoint
ALTER TABLE "brands" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "images" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "images_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"product_id" bigint,
	"variant_id" bigint,
	"path" text,
	"alt" text
);
--> statement-breakpoint
ALTER TABLE "images" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "colors" (
	"id" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "colors_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1),
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"name" text NOT NULL,
	"type" text NOT NULL
);
--> statement-breakpoint
ALTER TABLE "colors" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "order_items" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "order_items_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"quantity" integer,
	"unit_price" integer,
	"order_id" bigint NOT NULL,
	"item" jsonb NOT NULL
);
--> statement-breakpoint
ALTER TABLE "order_items" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "products" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "products_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"title" text NOT NULL,
	"description" text,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"published" boolean DEFAULT true NOT NULL,
	"slug" text,
	"attributes" jsonb DEFAULT '{}'::jsonb NOT NULL,
	"product_type" "product_type" DEFAULT 'glasses' NOT NULL
);
--> statement-breakpoint
ALTER TABLE "products" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "product_categories" (
	"product_id" bigint NOT NULL,
	"category_id" bigint NOT NULL,
	CONSTRAINT "product_categories_pkey" PRIMARY KEY("product_id","category_id")
);
--> statement-breakpoint
ALTER TABLE "product_categories" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "role_permissions" (
	"role_id" integer NOT NULL,
	"permission_id" integer NOT NULL,
	CONSTRAINT "role_permissions_pkey" PRIMARY KEY("role_id","permission_id")
);
--> statement-breakpoint
ALTER TABLE "role_permissions" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
ALTER TABLE "product_variants" ADD CONSTRAINT "product_variants_product_id_fkey" FOREIGN KEY ("product_id") REFERENCES "public"."products"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "categories" ADD CONSTRAINT "categories_parent_category_fkey" FOREIGN KEY ("parent_category") REFERENCES "public"."categories"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "images" ADD CONSTRAINT "images_product_id_fkey" FOREIGN KEY ("product_id") REFERENCES "public"."products"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "images" ADD CONSTRAINT "images_variant_id_fkey" FOREIGN KEY ("variant_id") REFERENCES "public"."product_variants"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "order_items" ADD CONSTRAINT "order_items_order_id_fkey" FOREIGN KEY ("order_id") REFERENCES "public"."orders"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "product_categories" ADD CONSTRAINT "product_categories_category_id_fkey" FOREIGN KEY ("category_id") REFERENCES "public"."categories"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "product_categories" ADD CONSTRAINT "product_categories_product_id_fkey" FOREIGN KEY ("product_id") REFERENCES "public"."products"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "role_permissions" ADD CONSTRAINT "role_permissions_permission_id_fkey" FOREIGN KEY ("permission_id") REFERENCES "public"."permissions"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "role_permissions" ADD CONSTRAINT "role_permissions_role_id_fkey" FOREIGN KEY ("role_id") REFERENCES "public"."roles"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
CREATE VIEW "public"."product_variants_with_images" WITH (security_invoker = on) AS (SELECT pv.id, i.path AS image_url, pv.price, pv.quantity_in_stock, pv.attributes, pv.product_id FROM product_variants pv LEFT JOIN images i ON i.variant_id = pv.id AND i.product_id = pv.product_id);--> statement-breakpoint
CREATE VIEW "public"."products_with_variants" AS (SELECT p.id, p.title, p.description, p.published, p.slug, p.created_at, p.product_type, json_agg(json_build_object('id', pv.id, 'image_url', pv.image_url, 'price', pv.price, 'quantity_in_stock', pv.quantity_in_stock, 'attributes', pv.attributes)) AS variants FROM products p LEFT JOIN product_variants_with_images pv ON pv.product_id = p.id GROUP BY p.id HAVING count(pv.*) > 0);--> statement-breakpoint
CREATE VIEW "public"."glasses" WITH (security_invoker = on) AS (SELECT id, title, description, created_at, published, slug, attributes, product_type, ( SELECT jsonb_build_object('id', c.id, 'name', c.name) AS jsonb_build_object FROM categories c JOIN product_categories pc ON pc.category_id = c.id WHERE pc.product_id = p.id AND c.parent_category IS NULL LIMIT 1) AS type, COALESCE(( SELECT jsonb_agg(jsonb_build_object('id', c.id, 'name', c.name)) AS jsonb_agg FROM categories c JOIN product_categories pc ON pc.category_id = c.id WHERE pc.product_id = p.id AND c.parent_category IS NOT NULL), '[]'::jsonb) AS categories FROM products p);--> statement-breakpoint
CREATE POLICY "allow delete access on product_variants based on role" ON "product_variants" AS PERMISSIVE FOR DELETE TO public USING (authorize('product_variants.delete'::text));--> statement-breakpoint
CREATE POLICY "allow insert access on product_variants based on role" ON "product_variants" AS PERMISSIVE FOR INSERT TO public;--> statement-breakpoint
CREATE POLICY "allow read access on product_variants based on role" ON "product_variants" AS PERMISSIVE FOR SELECT TO public;--> statement-breakpoint
CREATE POLICY "allow update access on product_variants based on role" ON "product_variants" AS PERMISSIVE FOR UPDATE TO public;--> statement-breakpoint
CREATE POLICY "allow select access to all users" ON "categories" AS PERMISSIVE FOR SELECT TO public USING (true);--> statement-breakpoint
CREATE POLICY "allow delete access on categories to only admin" ON "categories" AS PERMISSIVE FOR DELETE TO public;--> statement-breakpoint
CREATE POLICY "allow update access on categories to only admin" ON "categories" AS PERMISSIVE FOR UPDATE TO public;--> statement-breakpoint
CREATE POLICY "allow insert access on categories to only admin" ON "categories" AS PERMISSIVE FOR INSERT TO public;--> statement-breakpoint
CREATE POLICY "allow access to everyone" ON "orders" AS PERMISSIVE FOR INSERT TO public WITH CHECK (true);--> statement-breakpoint
CREATE POLICY "allow access to everything to everyone" ON "orders" AS PERMISSIVE FOR ALL TO public;--> statement-breakpoint
CREATE POLICY "allow delete access based on role" ON "images" AS PERMISSIVE FOR DELETE TO "authenticated" USING (authorize('product_variants.delete'::text));--> statement-breakpoint
CREATE POLICY "allow update access based on role" ON "images" AS PERMISSIVE FOR UPDATE TO "authenticated";--> statement-breakpoint
CREATE POLICY "allow insert access based on role" ON "images" AS PERMISSIVE FOR INSERT TO "authenticated";--> statement-breakpoint
CREATE POLICY "allow read access to everyone" ON "images" AS PERMISSIVE FOR SELECT TO public;--> statement-breakpoint
CREATE POLICY "allow read access to everyone" ON "colors" AS PERMISSIVE FOR SELECT TO public USING (true);--> statement-breakpoint
CREATE POLICY "allow access to everyone" ON "order_items" AS PERMISSIVE FOR ALL TO public USING (true) WITH CHECK (true);--> statement-breakpoint
CREATE POLICY "allow access on order items" ON "order_items" AS PERMISSIVE FOR INSERT TO public;--> statement-breakpoint
CREATE POLICY "allow delete access on products based on role" ON "products" AS PERMISSIVE FOR DELETE TO public USING (authorize('products.delete'::text));--> statement-breakpoint
CREATE POLICY "allow read access on products based on role" ON "products" AS PERMISSIVE FOR SELECT TO public;--> statement-breakpoint
CREATE POLICY "allow update access on products based on role" ON "products" AS PERMISSIVE FOR UPDATE TO public;--> statement-breakpoint
CREATE POLICY "allow insert access on products based on role" ON "products" AS PERMISSIVE FOR INSERT TO public;--> statement-breakpoint
CREATE POLICY "allow access to everyone" ON "product_categories" AS PERMISSIVE FOR ALL TO public USING (true) WITH CHECK (true);
*/